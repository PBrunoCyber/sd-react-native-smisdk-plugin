
import android.app.Application;
import android.content.Context;
import android.util.Log;

//////// Datami Imports ////////
import com.datami.smi.SdStateChangeListener;
import com.datami.smi.SmiResult;
import com.datami.smi.SmiSdk;
import com.datami.smisdk_plugin.SmiSdkReactModule;
import com.datami.smisdk_plugin.SmiSdkReactPackage;
/////////
import com.facebook.react.PackageList;
import com.facebook.react.ReactApplication;
import com.facebook.react.ReactInstanceManager;
import com.facebook.react.ReactNativeHost;
import com.facebook.react.ReactPackage;
import com.facebook.soloader.SoLoader;

import java.lang.reflect.InvocationTargetException;
import java.util.Arrays;
import java.util.List;

public class MainApplication extends Application implements SdStateChangeListener,  ReactApplication {

  private final ReactNativeHost mReactNativeHost =
      new ReactNativeHost(this) {
        @Override
        public boolean getUseDeveloperSupport() {
          return BuildConfig.DEBUG;
        }

        @Override
        protected List<ReactPackage> getPackages() {
          @SuppressWarnings("UnnecessaryLocalVariable")
          List<ReactPackage> packages = new PackageList(this).getPackages();
          // Packages that cannot be autolinked yet can be added manually here, for example:
          // packages.add(new MyReactNativePackage());
          packages.add(new SmiSdkReactPackage());return packages; // Datami react package
        }

        @Override
        protected String getJSMainModuleName() {
          return "index";
        }
      };

  @Override
  public ReactNativeHost getReactNativeHost() {
    return mReactNativeHost;
  }

  @Override
  public void onCreate() {
    super.onCreate();
//  Datami init API to start SD.
     int userIdRes = getResources().getIdentifier("smisdk_user_id", "string", this.getPackageName());
     int userTagRes = getResources().getIdentifier("smisdk_user_tag", "array", this.getPackageName());
     int startProxyRes = getResources().getIdentifier("smisdk_start_proxy", "bool", this.getPackageName());
     String userId = "";
     List<String> userTags = null;
     boolean isStartProxy = true;
     try{
         if(userIdRes!=0){
             userId = getResources().getString(userIdRes);
         }
     }catch (Exception ex){
         ex.printStackTrace();
     }
     try{
         if(userTagRes!=0){
             userTags = Arrays.asList(getResources().getStringArray(userTagRes));
         }
     }catch (Exception ex){
         ex.printStackTrace();
     }
     try{
         if(startProxyRes!=0){
             isStartProxy = getResources().getBoolean(startProxyRes);
         }
     }catch (Exception ex){
         ex.printStackTrace();
     }

     Log.d("[dmi]Application", "usrIDRes: " + userIdRes + ", usrTagRes: " + userTagRes + ", stProxyRes: " + startProxyRes);
     Log.d("[dmi]Application", "usrId: " + userId + ", usrTags: " + userTags + ", stProxy: " + isStartProxy);

     SmiSdk.initSponsoredData(getResources().getString(R.string.smisdk_apikey),
     this, userId, R.mipmap.ic_launcher,
     getResources().getBoolean(R.bool.smisdk_show_messaging),
     Arrays.asList(getResources().getStringArray(R.array.smisdk_exclusion_domin)), userTags, isStartProxy);
//
    SoLoader.init(this, /* native exopackage */ false);
    initializeFlipper(this, getReactNativeHost().getReactInstanceManager());
  }

  /**
   * Loads Flipper in React Native templates. Call this in the onCreate method with something like
   * initializeFlipper(this, getReactNativeHost().getReactInstanceManager());
   *
   * @param context
   * @param reactInstanceManager
   */
  private static void initializeFlipper(
      Context context, ReactInstanceManager reactInstanceManager) {
    if (BuildConfig.DEBUG) {
      try {
        /*
         We use reflection here to pick up the class that initializes Flipper,
        since Flipper library is not available in release mode
        */
        Class<?> aClass = Class.forName("com.rntest.ReactNativeFlipper");
        aClass
            .getMethod("initializeFlipper", Context.class, ReactInstanceManager.class)
            .invoke(null, context, reactInstanceManager);
      } catch (ClassNotFoundException e) {
        e.printStackTrace();
      } catch (NoSuchMethodException e) {
        e.printStackTrace();
      } catch (IllegalAccessException e) {
        e.printStackTrace();
      } catch (InvocationTargetException e) {
        e.printStackTrace();
      }
    }
  }

//  Datami SD state change listener.
    @Override
    public void onChange(SmiResult smiResult) {
        SmiSdkReactModule.setSmiResultToModule(smiResult);
    }
}
